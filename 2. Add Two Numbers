/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        if(l1==NULL && l2==NULL)
        {
            ListNode* newnode=new ListNode;
            newnode->val=0;
            return newnode;
        }
        else if(l1!=NULL && l2==NULL)
        {
            return l1; 
        }
        else if(l1==NULL && l2!=NULL)
        {
            return l2;
        }
        else
        {
            ListNode* head=new ListNode;
            ListNode* temp=head;
            int carry;
            carry=((l1->val+l2->val)/10);
            temp->val=((l1->val+l2->val)%10);
            l1=l1->next;
            l2=l2->next;
            int digit;
            while(l1!=NULL && l2!=NULL)
            {
                ListNode* newnode=new ListNode;
                digit=(l1->val+l2->val)+carry;
                carry=digit/10;
                digit=digit%10;
                newnode->val=digit;
                temp->next=newnode;
                temp=temp->next;
                l1=l1->next;
                l2=l2->next;
            }
            while(l1!=NULL && l2==NULL)
            {
                ListNode* newnode=new ListNode;
                digit=(l1->val)+carry;
                carry=digit/10;
                digit=digit%10;
                newnode->val=digit;
                temp->next=newnode;
                temp=temp->next;
                l1=l1->next;
            }
            while(l1==NULL && l2!=NULL)
            {
                ListNode* newnode=new ListNode;
                digit=(l2->val)+carry;
                carry=digit/10;
                digit=digit%10;
                newnode->val=digit;
                temp->next=newnode;
                temp=temp->next;
                l2=l2->next;
            }
            if(carry!=0)
            {
                ListNode* newnode=new ListNode;
                newnode->val=carry;
                temp->next=newnode;
            }
            return head;
        }
    }
};
